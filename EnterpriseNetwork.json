{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "namePrefix": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The prefix to add to each resource name."
      }
    },
    "locations": {
      "type": "array",
      "metadata": {
        "description": "The list of locations to deploy to."
      }
    },
    "coreLocationVnetPrefixes": {
      "type": "array",
      "metadata": {
        "description": "The list of core vnet prefixes to use in each location."
      }
    },
    "liveLocationVnetPrefixes": {
      "type": "array",
      "metadata": {
        "description": "The list of live vnet prefixes to use in each location."
      }
    },
    "nonLiveLocationVnetPrefixes": {
      "type": "array",
      "metadata": {
        "description": "The list of non-live vnet prefixes to use in each location."
      }
    },
    "adminUsername": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The administrative username to use for virtual machines."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "minLength": 8,
      "metadata": {
        "description": "The administrative password to use for virtual machines."
      }
    }
  },
  "variables": {
    // Storage
    "vhdStorageName": "[concat(parameters('namePrefix'), 'vhd')]",
    "vhdStorageType": "Standard_LRS",
    "vhdContainerName": "vhds",
    "diagStorageName": "[concat(parameters('namePrefix'), 'diag')]",
    "diagStorageType": "Standard_LRS",
    // Vnets
    "coreVnetName": "[concat(parameters('namePrefix'), 'corevnet')]",
    "liveVnetName": "[concat(parameters('namePrefix'), 'livevnet')]",
    "nonLiveVnetName": "[concat(parameters('namePrefix'), 'nonlivevnet')]",
    "vnetAddressSuffix": "0.0/16",
    "coreVnetGatewaySubnetSuffix": "0.0/24",
    "coreVnetNvaSubnetSuffix": "1.0/24",
    "liveVnetNvaSubnetSuffix": "1.0/24",
    "nonLiveVnetNvaSubnetSuffix": "1.0/24",
    // Gateways
    "gatewayPublicIpName": "[concat(parameters('namePrefix'), 'gwip')]",
    "gatewayName": "[concat(parameters('namePrefix'), 'gw')]",
    "gatewaySku": "Standard",
    // NICs
    "nvaVmNicName": "[concat(parameters('namePrefix'), 'nvanic')]",
    "jumpVmNicName": "[concat(parameters('namePrefix'), 'jumpnic')]",
    "liveVmNicName": "[concat(parameters('namePrefix'), 'livenic')]",
    "nonLiveVmNicName": "[concat(parameters('namePrefix'), 'nonlivenic')]",
    // VMs
    "nvaVmName": "[concat(parameters('namePrefix'), 'nva')]",
    "jumpVmName": "[concat(parameters('namePrefix'), 'jump')]",
    "liveVmName": "[concat(parameters('namePrefix'), 'live')]",
    "nonLiveVmName": "[concat(parameters('namePrefix'), 'nlive')]",
    "jumpVmPublicIpName": "[concat(parameters('namePrefix'), 'jumpvmip')]",
    "vmSize": "Standard_F1",
    "vmImagePublisher": "MicrosoftWindowsServer",
    "vmImageOffer": "WindowsServer",
    "vmWindowsOSVersion": "2012-R2-Datacenter",
    // Diagnostics
    "wadlogs": "<WadCfg> <DiagnosticMonitorConfiguration overallQuotaInMB=\"4096\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2010/10/DiagnosticsConfiguration\"> <DiagnosticInfrastructureLogs scheduledTransferLogLevelFilter=\"Error\"/> <WindowsEventLog scheduledTransferPeriod=\"PT1M\" > <DataSource name=\"Application!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"Security!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"System!*[System[(Level = 1 or Level = 2)]]\" /></WindowsEventLog>",
    "wadperfcounters1": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Processor Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU utilization\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Privileged Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU privileged time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% User Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor Information(_Total)\\Processor Frequency\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"CPU frequency\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\System\\Processes\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Processes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Thread Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Threads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Handle Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Handles\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\% Committed Bytes In Use\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory usage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Available Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Committed Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory committed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Commit Limit\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory commit limit\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
    "wadperfcounters2": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Read Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Write Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Transfers/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Reads/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk read operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Writes/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk write operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Read Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Write Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\LogicalDisk(_Total)\\% Free Space\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk free space (percentage)\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
    "wadcfgxstart": "[concat(variables('wadlogs'), variables('wadperfcounters1'), variables('wadperfcounters2'), '<Metrics resourceId=\"')]",
    "wadmetricsresourceid": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name , '/providers/', 'Microsoft.Compute/virtualMachines/')]",
    "wadcfgxend": "\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('vhdStorageName'), copyIndex(1))]",
      "apiVersion": "2016-01-01",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "vhdStorageCopy",
        "count": "[length(parameters('locations'))]"
      },
      "sku": {
        "name": "[variables('vhdStorageType')]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('diagStorageName'), copyIndex(1))]",
      "apiVersion": "2016-01-01",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "diagStorageCopy",
        "count": "[length(parameters('locations'))]"
      },
      "sku": {
        "name": "[variables('diagStorageType')]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "name": "[concat(variables('coreVnetName'), copyIndex(1))]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "coreVnetCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('vnetAddressSuffix'))]"
          ]
        },
        "subnets": [
          {
            "name": "GatewaySubnet",
            "properties": {
              "addressPrefix": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('coreVnetGatewaySubnetSuffix'))]"
            }
          },
          {
            "name": "NvaSubnet",
            "properties": {
              "addressPrefix": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('coreVnetNvaSubnetSuffix'))]"
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('liveVnetName'), copyIndex(1))]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "liveVnetCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[concat(parameters('liveLocationVnetPrefixes')[copyIndex()], variables('vnetAddressSuffix'))]"
          ]
        },
        "subnets": [
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[concat(parameters('liveLocationVnetPrefixes')[copyIndex()], variables('liveVnetNvaSubnetSuffix'))]"
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('nonLiveVnetName'), copyIndex(1))]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nonLiveVnetCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[concat(parameters('nonLiveLocationVnetPrefixes')[copyIndex()], variables('vnetAddressSuffix'))]"
          ]
        },
        "subnets": [
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[concat(parameters('nonLiveLocationVnetPrefixes')[copyIndex()], variables('nonLiveVnetNvaSubnetSuffix'))]"
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('coreVnetName'), copyIndex(1), '/peerToLive')]",
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "coreLivePeeringCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('coreVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('liveVnetName'), copyIndex(1)))]"
      ],
      "properties": {
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": true,
        "useRemoteGateways": false,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('liveVnetName'), copyIndex(1)))]"
        }
      }
    },
    {
      "name": "[concat(variables('liveVnetName'), copyIndex(1), '/peerToCore')]",
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "liveCorePeeringCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('coreVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('liveVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworkGateways/', concat(variables('gatewayName'), copyIndex(1)))]"
      ],
      "properties": {
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": false,
        "allowGatewayTransit": false,
        "useRemoteGateways": true,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('coreVnetName'), copyIndex(1)))]"
        }
      }
    },
    {
      "name": "[concat(variables('coreVnetName'), copyIndex(1), '/peerToNonLive')]",
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "coreNonLivePeeringCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('coreVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('nonLiveVnetName'), copyIndex(1)))]"
      ],
      "properties": {
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": true,
        "useRemoteGateways": false,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('nonLiveVnetName'), copyIndex(1)))]"
        }
      }
    },
    {
      "name": "[concat(variables('nonLiveVnetName'), copyIndex(1), '/peerToCore')]",
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nonLiveCorePeeringCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('coreVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('nonLiveVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworkGateways/', concat(variables('gatewayName'), copyIndex(1)))]"
      ],
      "properties": {
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": false,
        "allowGatewayTransit": false,
        "useRemoteGateways": true,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('coreVnetName'), copyIndex(1)))]"
        }
      }
    },
    {
      "name": "[concat(variables('jumpVmPublicIpName'), copyIndex(1))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "jumpVmPublicIpCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "name": "[concat(variables('gatewayPublicIpName'), copyIndex(1))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "gatewayPublicIpCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "name": "[concat(variables('gatewayName'), copyIndex(1))]",
      "type": "Microsoft.Network/virtualNetworkGateways",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "gatewayCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('gatewayPublicIpName'), copyIndex(1))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('coreVnetName'), copyIndex(1))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', concat(variables('coreVnetName'), copyIndex(1))), '/subnets/GatewaySubnet')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('gatewayPublicIpName'), copyIndex(1)))]"
              }
            },
            "name": "vnetGatewayConfig"
          }
        ],
        "sku": {
          "name": "[variables('gatewaySku')]",
          "tier": "[variables('gatewaySku')]"
        },
        "gatewayType": "Vpn",
        "vpnType": "RouteBased",
        "enableBgp": "false"
      }
    },
    {
      "name": "[concat(variables('nvaVmNicName'), copyIndex(1))]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nvaNicCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('coreVnetName'), copyIndex(1)))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('nvaVmNicName'), copyIndex(1), 'ipconfig')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', concat(variables('coreVnetName'), copyIndex(1))), '/subnets/NvaSubnet')]"
              }
            }
          }
        ],
        "enableIPForwarding": true
      }
    },
    {
      "name": "[concat(variables('jumpVmNicName'), copyIndex(1))]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "jumpNicCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('coreVnetName'), copyIndex(1)))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('jumpVmNicName'), copyIndex(1), 'ipconfig')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('jumpVmPublicIpName'), copyIndex(1)))]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', concat(variables('coreVnetName'), copyIndex(1))), '/subnets/NvaSubnet')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('liveVmNicName'), copyIndex(1))]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "liveNicCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('liveVnetName'), copyIndex(1)))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('liveVmNicName'), copyIndex(1), 'ipconfig')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', concat(variables('liveVnetName'), copyIndex(1))), '/subnets/Subnet')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('nonLiveVmNicName'), copyIndex(1))]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nonLiveNicCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('nonLiveVnetName'), copyIndex(1)))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('nonLiveVmNicName'), copyIndex(1), 'ipconfig')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', concat(variables('nonLiveVnetName'), copyIndex(1))), '/subnets/Subnet')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('nvaVmName'), copyIndex(1))]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nvaVmCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('nvaVmNicName'), copyIndex(1)))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('nvaVmName'), copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[variables('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))).primaryEndpoints.blob, variables('vhdContainerName'), '/', variables('nvaVmName'), copyIndex(1), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nvaVmNicName'), copyIndex(1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1)))).primaryEndpoints.blob]"
          }
        }
      },
      "resources": [
        {
          "name": "Microsoft.Insights.VMDiagnosticsSettings",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('nvaVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Diagnostics",
            "type": "IaaSDiagnostics",
            "typeHandlerVersion": "1.5",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('wadmetricsresourceid'), concat(variables('nvaVmName'), copyIndex(1)), variables('wadcfgxend')))]",
              "storageAccount": "[concat(variables('diagStorageName'), copyIndex(1))]"
            },
            "protectedSettings": {
              "storageAccountName": "[concat(variables('diagStorageName'), copyIndex(1))]",
              "storageAccountKey": "[listkeys(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1))), '2015-06-15').key1]",
              "storageAccountEndPoint": "https://core.windows.net"
            }
          }
        }
      ]
    },
    {
      "name": "[concat(variables('jumpVmName'), copyIndex(1))]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "jumpVmCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('jumpVmNicName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('jumpVmPublicIpName'), copyIndex(1)))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('jumpVmName'), copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[variables('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))).primaryEndpoints.blob, variables('vhdContainerName'), '/', variables('jumpVmName'), copyIndex(1), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('jumpVmNicName'), copyIndex(1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1)))).primaryEndpoints.blob]"
          }
        }
      },
      "resources": [
        {
          "name": "Microsoft.Insights.VMDiagnosticsSettings",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('jumpVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Diagnostics",
            "type": "IaaSDiagnostics",
            "typeHandlerVersion": "1.5",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('wadmetricsresourceid'), concat(variables('jumpVmName'), copyIndex(1)), variables('wadcfgxend')))]",
              "storageAccount": "[concat(variables('diagStorageName'), copyIndex(1))]"
            },
            "protectedSettings": {
              "storageAccountName": "[concat(variables('diagStorageName'), copyIndex(1))]",
              "storageAccountKey": "[listkeys(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1))), '2015-06-15').key1]",
              "storageAccountEndPoint": "https://core.windows.net"
            }
          }
        } /*,
        {
          "name": "scripttest",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('jumpVmName'), copyIndex(1)))]"
          ],
          "tags": {
            "displayName": "scripttest"
          },
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(parameters('_artifactsLocation'), '/', variables('scripttestScriptFilePath'), parameters('_artifactsLocationSasToken'))]"
              ],
              "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ', variables('scripttestScriptFilePath'))]"
            }
          }
        }*/
      ]
    },
    {
      "name": "[concat(variables('liveVmName'), copyIndex(1))]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "liveVmCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('liveVmNicName'), copyIndex(1)))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('liveVmName'), copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[variables('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))).primaryEndpoints.blob, variables('vhdContainerName'), '/', variables('liveVmName'), copyIndex(1), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('liveVmNicName'), copyIndex(1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1)))).primaryEndpoints.blob]"
          }
        }
      },
      "resources": [
        {
          "name": "Microsoft.Insights.VMDiagnosticsSettings",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('liveVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Diagnostics",
            "type": "IaaSDiagnostics",
            "typeHandlerVersion": "1.5",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('wadmetricsresourceid'), concat(variables('liveVmName'), copyIndex(1)), variables('wadcfgxend')))]",
              "storageAccount": "[concat(variables('diagStorageName'), copyIndex(1))]"
            },
            "protectedSettings": {
              "storageAccountName": "[concat(variables('diagStorageName'), copyIndex(1))]",
              "storageAccountKey": "[listkeys(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1))), '2015-06-15').key1]",
              "storageAccountEndPoint": "https://core.windows.net"
            }
          }
        }
      ]
    },
    {
      "name": "[concat(variables('nonLiveVmName'), copyIndex(1))]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nonLiveVmCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('nonLiveVmNicName'), copyIndex(1)))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('nonLiveVmName'), copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[variables('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))).primaryEndpoints.blob, variables('vhdContainerName'), '/', variables('nonLiveVmName'), copyIndex(1), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nonLiveVmNicName'), copyIndex(1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1)))).primaryEndpoints.blob]"
          }
        }
      },
      "resources": [
        {
          "name": "Microsoft.Insights.VMDiagnosticsSettings",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('nonLiveVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Diagnostics",
            "type": "IaaSDiagnostics",
            "typeHandlerVersion": "1.5",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('wadmetricsresourceid'), concat(variables('nonLiveVmName'), copyIndex(1)), variables('wadcfgxend')))]",
              "storageAccount": "[concat(variables('diagStorageName'), copyIndex(1))]"
            },
            "protectedSettings": {
              "storageAccountName": "[concat(variables('diagStorageName'), copyIndex(1))]",
              "storageAccountKey": "[listkeys(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1))), '2015-06-15').key1]",
              "storageAccountEndPoint": "https://core.windows.net"
            }
          }
        }
      ]
    }
  ]
}