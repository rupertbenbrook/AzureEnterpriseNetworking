{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "namePrefix": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The prefix to add to each resource name."
      }
    },
    "locations": {
      "type": "array",
      "metadata": {
        "description": "The list of locations to deploy to."
      }
    },
    "coreLocationVnetPrefixes": {
      "type": "array",
      "metadata": {
        "description": "The list of core vnet prefixes to use in each location."
      }
    },
    "liveLocationVnetPrefixes": {
      "type": "array",
      "metadata": {
        "description": "The list of live vnet prefixes to use in each location."
      }
    },
    "nonLiveLocationVnetPrefixes": {
      "type": "array",
      "metadata": {
        "description": "The list of non-live vnet prefixes to use in each location."
      }
    },
    "adminUsername": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The administrative username to use for virtual machines."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "minLength": 8,
      "metadata": {
        "description": "The administrative password to use for virtual machines."
      }
    },
    "scriptsStorage": {
      "type": "string",
      "metadata": {
        "description": "The Uri of the storage account containing scripts."
      }
    },
    "scriptsSasToken": {
      "type": "string",
      "metadata": {
        "description": "The storage SAS token to access the storage account containing scripts."
      }
    }
  },
  "variables": {
    // Storage
    "vhdStorageName": "[concat(parameters('namePrefix'), 'vhd')]",
    "vhdStorageType": "Standard_LRS",
    "vhdContainerName": "vhds",
    "diagStorageName": "[concat(parameters('namePrefix'), 'diag')]",
    "diagStorageType": "Standard_LRS",
    // NSGs
    "coreNvaNsgName": "corenvansg",
    "liveSubnetNsgName": "livensg",
    "nonLiveSubnetNsgName": "nlivensg",
    // Route Tables
    "coreGatewayRouteTableName": "coregwroute",
    "coreNvaRouteTableName": "corenvaroute",
    "liveRouteTableName": "liveroute",
    "nonLiveRouteTableName": "nliveroute",
    // Vnets
    "coreVnetName": "[concat(parameters('namePrefix'), 'corevnet')]",
    "liveVnetName": "[concat(parameters('namePrefix'), 'livevnet')]",
    "nonLiveVnetName": "[concat(parameters('namePrefix'), 'nonlivevnet')]",
    "vnetAddressSuffix": "0.0/16",
    "coreVnetGatewaySubnetSuffix": "0.0/24",
    "coreVnetNvaSubnetSuffix": "1.0/24",
    "liveVnetSubnetSuffix": "1.0/24",
    "nonLiveVnetSubnetSuffix": "1.0/24",
    "nvaPrivateIpSuffix": "1.4",
    // Gateways
    "gatewayPublicIpName": "[concat(parameters('namePrefix'), 'gwip')]",
    "gatewayName": "[concat(parameters('namePrefix'), 'gw')]",
    "gatewaySku": "Standard",
    // Connections
    "connectionName": "[concat(parameters('namePrefix'), 'connect')]",
    "sharedKey": "Eh61HBP7tO5byHzyrRDLD1l5fjFyXK",
    // NICs
    "nvaVmNicName": "[concat(parameters('namePrefix'), 'nvanic')]",
    "jumpVmNicName": "[concat(parameters('namePrefix'), 'jumpnic')]",
    "liveVmNicName": "[concat(parameters('namePrefix'), 'livenic')]",
    "nonLiveVmNicName": "[concat(parameters('namePrefix'), 'nonlivenic')]",
    // VMs
    "nvaVmName": "[concat(parameters('namePrefix'), 'nva')]",
    "jumpVmName": "[concat(parameters('namePrefix'), 'jump')]",
    "liveVmName": "[concat(parameters('namePrefix'), 'live')]",
    "nonLiveVmName": "[concat(parameters('namePrefix'), 'nlive')]",
    "jumpVmPublicIpName": "[concat(parameters('namePrefix'), 'jumpvmip')]",
    "vmSize": "Standard_F1",
    "vmImagePublisher": "MicrosoftWindowsServer",
    "vmImageOffer": "WindowsServer",
    "vmWindowsOSVersion": "2012-R2-Datacenter",
    "vmConfigScript": "VmConfig.ps1",
    "nvaConfigScript": "NvaConfig.ps1",
    // Diagnostics
    "wadprefix": "<WadCfg><DiagnosticMonitorConfiguration xmlns=\"http://schemas.microsoft.com/ServiceHosting/2010/10/DiagnosticsConfiguration\" overallQuotaInMB=\"4096\"><DiagnosticInfrastructureLogs scheduledTransferPeriod=\"PT1M\" scheduledTransferLogLevelFilter=\"Undefined\"/><WindowsEventLog scheduledTransferPeriod=\"PT1M\"><DataSource name=\"System!*[System[(Level = 0)]]\"/><DataSource name=\"System!*[System[Provider[@Name='Microsoft Antimalware']]]\"/><DataSource name=\"Security!*[System[(Level = 0)]]\"/><DataSource name=\"Application!*[System[(Level = 0)]]\"/><DataSource name=\"Windows Azure!*[System[(Level = 0)]]\"/></WindowsEventLog><PerformanceCounters scheduledTransferPeriod=\"PT0S\"><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Processor Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU percentage guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Interrupt Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU interrupt time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Privileged Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU privileged time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor Information(_Total)\\Parking Status\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"CPU parking status\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% User Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor Information(_Total)\\% Processor Performance\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Processor percent perf.\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor Information(_Total)\\Processor Frequency\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Processor frequency\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\System\\Threads\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Threads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\System\\Processes\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Processes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Thread(_Total)\\Context Switches/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Context switches\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Committed Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory committed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Available Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\% Committed Bytes In Use\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory percentage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Cache Faults/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Cache faults\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Page Faults/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Page faults\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Page Reads/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Page reads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Pages/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Memory pages\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Transition Faults/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Transition faults\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Pool Paged Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Paged pool\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Pool Nonpaged Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Non-paged pool\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\% Processor Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Process total time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Page Faults/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Process page faults\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Thread Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Process total threads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Handle Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Process total handles\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Private Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Process function bytes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Working Set\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Process working set\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Working Set - Private\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Process function working set\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Read Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Write Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Web Service(_Total)\\Bytes Total/Sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Web service bytes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Web Service(_Total)\\ISAPI Extension Requests/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"ISAPI extension requests\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Web Service(_Total)\\Connection Attempts/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Web connection attempts\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Web Service(_Total)\\Current Connections\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Web current connections\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Web Service(_Total)\\Get Requests/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Web get requests\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Web Service(_Total)\\Post Requests/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Web post requests\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\TCPv4\\Connections Established\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"TCP connections established\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\TCPv4\\Connection Failures\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"TCP connections failed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\TCPv4\\Connections Reset\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"TCP connections reset\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\TCPv4\\Segments Sent/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"TCP segments sent\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\TCPv4\\Segments Received/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"TCP segments received\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\TCPv4\\Segments Retransmitted/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"TCP seg. restransmitted\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters><Metrics resourceId=\"",
    "wadsuffix": "\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>",
    "wadresourceid": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name , '/providers/', 'Microsoft.Compute/virtualMachines/')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('vhdStorageName'), copyIndex(1))]",
      "apiVersion": "2016-01-01",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "vhdStorageCopy",
        "count": "[length(parameters('locations'))]"
      },
      "sku": {
        "name": "[variables('vhdStorageType')]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('diagStorageName'), copyIndex(1))]",
      "apiVersion": "2016-01-01",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "diagStorageCopy",
        "count": "[length(parameters('locations'))]"
      },
      "sku": {
        "name": "[variables('diagStorageType')]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "name": "[concat(variables('coreNvaNsgName'), copyIndex(1))]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "coreNvaNsgCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "securityRules": [
          {
            "name": "allow-rdp-in",
            "properties": {
              "description": "Allow RDP inbound",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 500,
              "direction": "Inbound"
            }
          },
          {
            "name": "[concat('allow-live-corenva-in', copyIndex(1))]",
            "properties": {
              "description": "Allow Live subnet inbound",
              "priority": 210,
              "access": "Allow",
              "direction": "Inbound",
              "protocol": "*",
              "sourceAddressPrefix": "[concat(parameters('liveLocationVnetPrefixes')[copyIndex()], variables('liveVnetSubnetSuffix'))]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('coreVnetNvaSubnetSuffix'))]",
              "destinationPortRange": "*"
            }
          },
          {
            "name": "[concat('allow-corenva-live-out', copyIndex(1))]",
            "properties": {
              "description": "Allow Live subnet outbound",
              "priority": 220,
              "access": "Allow",
              "direction": "Outbound",
              "protocol": "*",
              "sourceAddressPrefix": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('coreVnetNvaSubnetSuffix'))]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[concat(parameters('liveLocationVnetPrefixes')[copyIndex()], variables('liveVnetSubnetSuffix'))]",
              "destinationPortRange": "*"
            }
          },
          {
            "name": "[concat('allow-nonlive-corenva-in', copyIndex(1))]",
            "properties": {
              "description": "Allow Non-Live subnet inbound",
              "priority": 310,
              "access": "Allow",
              "direction": "Inbound",
              "protocol": "*",
              "sourceAddressPrefix": "[concat(parameters('nonLiveLocationVnetPrefixes')[copyIndex()], variables('nonLiveVnetSubnetSuffix'))]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('coreVnetNvaSubnetSuffix'))]",
              "destinationPortRange": "*"
            }
          },
          {
            "name": "[concat('allow-corenva-nonlive-out', copyIndex(1))]",
            "properties": {
              "description": "Allow Non-Live subnet outbound",
              "priority": 320,
              "access": "Allow",
              "direction": "Outbound",
              "protocol": "*",
              "sourceAddressPrefix": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('coreVnetNvaSubnetSuffix'))]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[concat(parameters('nonLiveLocationVnetPrefixes')[copyIndex()], variables('nonLiveVnetSubnetSuffix'))]",
              "destinationPortRange": "*"
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('liveSubnetNsgName'), copyIndex(1))]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "liveSubnetNsgCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "securityRules": [
          {
            "name": "[concat('allow-corenva-live-in', copyIndex(1))]",
            "properties": {
              "description": "Allow Core NVA subnet inbound",
              "priority": 110,
              "access": "Allow",
              "direction": "Inbound",
              "protocol": "*",
              "sourceAddressPrefix": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('coreVnetNvaSubnetSuffix'))]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[concat(parameters('liveLocationVnetPrefixes')[copyIndex()], variables('liveVnetSubnetSuffix'))]",
              "destinationPortRange": "*"
            }
          },
          {
            "name": "[concat('allow-live-corenva-out', copyIndex(1))]",
            "properties": {
              "description": "Allow Core NVA subnet outbound",
              "priority": 120,
              "access": "Allow",
              "direction": "Outbound",
              "protocol": "*",
              "sourceAddressPrefix": "[concat(parameters('liveLocationVnetPrefixes')[copyIndex()], variables('liveVnetSubnetSuffix'))]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('coreVnetNvaSubnetSuffix'))]",
              "destinationPortRange": "*"
            }
          },
          {
            "name": "[concat('allow-nonlive-live-in', copyIndex(1))]",
            "properties": {
              "description": "Allow Non-Live subnet inbound",
              "priority": 310,
              "access": "Allow",
              "direction": "Inbound",
              "protocol": "*",
              "sourceAddressPrefix": "[concat(parameters('nonLiveLocationVnetPrefixes')[copyIndex()], variables('nonLiveVnetSubnetSuffix'))]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[concat(parameters('liveLocationVnetPrefixes')[copyIndex()], variables('liveVnetSubnetSuffix'))]",
              "destinationPortRange": "*"
            }
          },
          {
            "name": "[concat('allow-live-nonlive-out', copyIndex(1))]",
            "properties": {
              "description": "Allow Non-Live subnet outbound",
              "priority": 320,
              "access": "Allow",
              "direction": "Outbound",
              "protocol": "*",
              "sourceAddressPrefix": "[concat(parameters('liveLocationVnetPrefixes')[copyIndex()], variables('liveVnetSubnetSuffix'))]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[concat(parameters('nonLiveLocationVnetPrefixes')[copyIndex()], variables('nonLiveVnetSubnetSuffix'))]",
              "destinationPortRange": "*"
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('nonLiveSubnetNsgName'), copyIndex(1))]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nonLiveSubnetNsgCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "securityRules": [
          {
            "name": "[concat('allow-corenva-nonlive-in', copyIndex(1))]",
            "properties": {
              "description": "Allow Core NVA subnet inbound",
              "priority": 110,
              "access": "Allow",
              "direction": "Inbound",
              "protocol": "*",
              "sourceAddressPrefix": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('coreVnetNvaSubnetSuffix'))]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[concat(parameters('nonLiveLocationVnetPrefixes')[copyIndex()], variables('nonLiveVnetSubnetSuffix'))]",
              "destinationPortRange": "*"
            }
          },
          {
            "name": "[concat('allow-nonlive-corenva-out', copyIndex(1))]",
            "properties": {
              "description": "Allow Core NVA subnet outbound",
              "priority": 120,
              "access": "Allow",
              "direction": "Outbound",
              "protocol": "*",
              "sourceAddressPrefix": "[concat(parameters('nonLiveLocationVnetPrefixes')[copyIndex()], variables('nonLiveVnetSubnetSuffix'))]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('coreVnetNvaSubnetSuffix'))]",
              "destinationPortRange": "*"
            }
          },
          {
            "name": "[concat('allow-live-nonlive-in', copyIndex(1))]",
            "properties": {
              "description": "Allow Live subnet inbound",
              "priority": 210,
              "access": "Allow",
              "direction": "Inbound",
              "protocol": "*",
              "sourceAddressPrefix": "[concat(parameters('liveLocationVnetPrefixes')[copyIndex()], variables('liveVnetSubnetSuffix'))]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[concat(parameters('nonLiveLocationVnetPrefixes')[copyIndex()], variables('nonLiveVnetSubnetSuffix'))]",
              "destinationPortRange": "*"
            }
          },
          {
            "name": "[concat('allow-nonlive-live-out', copyIndex(1))]",
            "properties": {
              "description": "Allow Live subnet outbound",
              "priority": 220,
              "access": "Allow",
              "direction": "Outbound",
              "protocol": "*",
              "sourceAddressPrefix": "[concat(parameters('nonLiveLocationVnetPrefixes')[copyIndex()], variables('nonLiveVnetSubnetSuffix'))]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "[concat(parameters('liveLocationVnetPrefixes')[copyIndex()], variables('liveVnetSubnetSuffix'))]",
              "destinationPortRange": "*"
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('coreNvaRouteTableName'), copyIndex(1))]",
      "type": "Microsoft.Network/routeTables",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "coreNvaRouteTableCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "routes": []
      }
    },
    {
      "name": "[concat(variables('liveRouteTableName'), copyIndex(1))]",
      "type": "Microsoft.Network/routeTables",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "liveRouteTableCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "routes": [
          {
            "name": "defaultLiveToNva",
            "properties": {
              "addressPrefix": "0.0.0.0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('nvaPrivateIpSuffix'))]"
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('nonLiveRouteTableName'), copyIndex(1))]",
      "type": "Microsoft.Network/routeTables",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nonLiveRouteTableCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "routes": [
          {
            "name": "defaultNonLiveToNva",
            "properties": {
              "addressPrefix": "0.0.0.0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('nvaPrivateIpSuffix'))]"
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('coreVnetName'), copyIndex(1))]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "coreVnetCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups/', concat(variables('coreNvaNsgName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/routeTables/', concat(variables('coreNvaRouteTableName'), copyIndex(1)))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('vnetAddressSuffix'))]"
          ]
        },
        "subnets": [
          {
            "name": "GatewaySubnet",
            "properties": {
              "addressPrefix": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('coreVnetGatewaySubnetSuffix'))]",
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', concat(variables('coreGatewayRouteTableName'), copyIndex(1)))]"
              }
            }
          },
          {
            "name": "NvaSubnet",
            "properties": {
              "addressPrefix": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('coreVnetNvaSubnetSuffix'))]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('coreNvaNsgName'), copyIndex(1)))]"
              },
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', concat(variables('coreNvaRouteTableName'), copyIndex(1)))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('liveVnetName'), copyIndex(1))]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "liveVnetCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups/', concat(variables('liveSubnetNsgName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/routeTables/', concat(variables('liveRouteTableName'), copyIndex(1)))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[concat(parameters('liveLocationVnetPrefixes')[copyIndex()], variables('vnetAddressSuffix'))]"
          ]
        },
        "subnets": [
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[concat(parameters('liveLocationVnetPrefixes')[copyIndex()], variables('liveVnetSubnetSuffix'))]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('liveSubnetNsgName'), copyIndex(1)))]"
              },
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', concat(variables('liveRouteTableName'), copyIndex(1)))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('nonLiveVnetName'), copyIndex(1))]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nonLiveVnetCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups/', concat(variables('nonLiveSubnetNsgName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/routeTables/', concat(variables('nonLiveRouteTableName'), copyIndex(1)))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[concat(parameters('nonLiveLocationVnetPrefixes')[copyIndex()], variables('vnetAddressSuffix'))]"
          ]
        },
        "subnets": [
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[concat(parameters('nonLiveLocationVnetPrefixes')[copyIndex()], variables('nonLiveVnetSubnetSuffix'))]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('nonLiveSubnetNsgName'), copyIndex(1)))]"
              },
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', concat(variables('nonLiveRouteTableName'), copyIndex(1)))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('coreVnetName'), copyIndex(1), '/peerToLive')]",
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "coreLivePeeringCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('coreVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('liveVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworkGateways/', concat(variables('gatewayName'), copyIndex(1)))]"
      ],
      "properties": {
        "allowVirtualNetworkAccess": false,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": true,
        "useRemoteGateways": false,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('liveVnetName'), copyIndex(1)))]"
        }
      }
    },
    {
      "name": "[concat(variables('liveVnetName'), copyIndex(1), '/peerToCore')]",
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "liveCorePeeringCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('coreVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('liveVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworkGateways/', concat(variables('gatewayName'), copyIndex(1)))]"
      ],
      "properties": {
        "allowVirtualNetworkAccess": false,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": false,
        "useRemoteGateways": true,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('coreVnetName'), copyIndex(1)))]"
        }
      }
    },
    {
      "name": "[concat(variables('coreVnetName'), copyIndex(1), '/peerToNonLive')]",
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "coreNonLivePeeringCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('coreVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('nonLiveVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworkGateways/', concat(variables('gatewayName'), copyIndex(1)))]"
      ],
      "properties": {
        "allowVirtualNetworkAccess": false,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": true,
        "useRemoteGateways": false,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('nonLiveVnetName'), copyIndex(1)))]"
        }
      }
    },
    {
      "name": "[concat(variables('nonLiveVnetName'), copyIndex(1), '/peerToCore')]",
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nonLiveCorePeeringCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('coreVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('nonLiveVnetName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworkGateways/', concat(variables('gatewayName'), copyIndex(1)))]"
      ],
      "properties": {
        "allowVirtualNetworkAccess": false,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": false,
        "useRemoteGateways": true,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('coreVnetName'), copyIndex(1)))]"
        }
      }
    },
    {
      "name": "[concat(variables('jumpVmPublicIpName'), copyIndex(1))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "jumpVmPublicIpCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "name": "[concat(variables('gatewayPublicIpName'), copyIndex(1))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "gatewayPublicIpCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "name": "[concat(variables('gatewayName'), copyIndex(1))]",
      "type": "Microsoft.Network/virtualNetworkGateways",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "gatewayCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('gatewayPublicIpName'), copyIndex(1))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('coreVnetName'), copyIndex(1))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', concat(variables('coreVnetName'), copyIndex(1))), '/subnets/GatewaySubnet')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('gatewayPublicIpName'), copyIndex(1)))]"
              }
            },
            "name": "vnetGatewayConfig"
          }
        ],
        "sku": {
          "name": "[variables('gatewaySku')]",
          "tier": "[variables('gatewaySku')]"
        },
        "gatewayType": "Vpn",
        "vpnType": "RouteBased",
        "enableBgp": "false"
      }
    },
    {
      "name": "[concat(variables('connectionName'), copyIndex(1))]",
      "type": "Microsoft.Network/connections",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "connectionCopy",
        "count": "[sub(length(parameters('locations')), 1)]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "gatewayCopy"
      ],
      "properties": {
        "virtualNetworkGateway1": {
          "id": "[resourceId('Microsoft.Network/virtualNetworkGateways', concat(variables('gatewayName'), copyIndex(1)))]"
        },
        "virtualNetworkGateway2": {
          "id": "[resourceId('Microsoft.Network/virtualNetworkGateways', concat(variables('gatewayName'), copyIndex(2)))]"
        },
        "connectionType": "Vnet2Vnet",
        "routingWeight": 3,
        "sharedKey": "[variables('sharedKey')]"
      }
    },
    {
      "name": "[concat(variables('connectionName'), length(parameters('locations')))]",
      "type": "Microsoft.Network/connections",
      "location": "[parameters('locations')[sub(length(parameters('locations')), 1)]]",
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "gatewayCopy"
      ],
      "properties": {
        "virtualNetworkGateway1": {
          "id": "[resourceId('Microsoft.Network/virtualNetworkGateways', concat(variables('gatewayName'), length(parameters('locations'))))]"
        },
        "virtualNetworkGateway2": {
          "id": "[resourceId('Microsoft.Network/virtualNetworkGateways', concat(variables('gatewayName'), '1'))]"
        },
        "connectionType": "Vnet2Vnet",
        "routingWeight": 3,
        "sharedKey": "[variables('sharedKey')]"
      }
    },
    {
      "name": "[concat(variables('nvaVmNicName'), copyIndex(1))]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nvaNicCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('coreVnetName'), copyIndex(1)))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('nvaVmNicName'), copyIndex(1), 'ipconfig')]",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(parameters('coreLocationVnetPrefixes')[copyIndex()], variables('nvaPrivateIpSuffix'))]",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', concat(variables('coreVnetName'), copyIndex(1))), '/subnets/NvaSubnet')]"
              }
            }
          }
        ],
        "enableIPForwarding": true
      }
    },
    {
      "name": "[concat(variables('jumpVmNicName'), copyIndex(1))]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "jumpNicCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('coreVnetName'), copyIndex(1)))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('jumpVmNicName'), copyIndex(1), 'ipconfig')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('jumpVmPublicIpName'), copyIndex(1)))]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', concat(variables('coreVnetName'), copyIndex(1))), '/subnets/NvaSubnet')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('liveVmNicName'), copyIndex(1))]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "liveNicCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('liveVnetName'), copyIndex(1)))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('liveVmNicName'), copyIndex(1), 'ipconfig')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', concat(variables('liveVnetName'), copyIndex(1))), '/subnets/Subnet')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('nonLiveVmNicName'), copyIndex(1))]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nonLiveNicCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('nonLiveVnetName'), copyIndex(1)))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('nonLiveVmNicName'), copyIndex(1), 'ipconfig')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', concat(variables('nonLiveVnetName'), copyIndex(1))), '/subnets/Subnet')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('nvaVmName'), copyIndex(1))]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nvaVmCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('nvaVmNicName'), copyIndex(1)))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('nvaVmName'), copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[variables('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))).primaryEndpoints.blob, variables('vhdContainerName'), '/', variables('nvaVmName'), copyIndex(1), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nvaVmNicName'), copyIndex(1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1)))).primaryEndpoints.blob]"
          }
        }
      },
      "resources": [
        {
          "name": "Microsoft.Insights.VMDiagnosticsSettings",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('nvaVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Diagnostics",
            "type": "IaaSDiagnostics",
            "typeHandlerVersion": "1.5",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "xmlCfg": "[base64(concat(variables('wadprefix'), variables('wadresourceid'), concat(variables('nvaVmName'), copyIndex(1)), variables('wadsuffix')))]",
              "storageAccount": "[concat(variables('diagStorageName'), copyIndex(1))]"
            },
            "protectedSettings": {
              "storageAccountName": "[concat(variables('diagStorageName'), copyIndex(1))]",
              "storageAccountKey": "[listkeys(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1))), '2015-06-15').key1]",
              "storageAccountEndPoint": "https://core.windows.net"
            }
          }
        },
        {
          "name": "IaaSAntimalware",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('nvaVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Security",
            "type": "IaaSAntimalware",
            "typeHandlerVersion": "1.3",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "AntimalwareEnabled": true,
              "RealtimeProtectionEnabled": "true",
              "ScheduledScanSettings": {
                "isEnabled": "false",
                "day": "7",
                "time": "120",
                "scanType": "Quick"
              },
              "Exclusions": {
                "Extensions": "",
                "Paths": "",
                "Processes": ""
              }
            }
          }
        },
        {
          "name": "vmScript",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('nvaVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(parameters('scriptsStorage'), '/', variables('vmConfigScript'), parameters('scriptsSasToken'))]",
                "[concat(parameters('scriptsStorage'), '/', variables('nvaConfigScript'), parameters('scriptsSasToken'))]"
              ],
              "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ', variables('nvaConfigScript'))]"
            }
          }
        }
      ]
    },
    {
      "name": "[concat(variables('jumpVmName'), copyIndex(1))]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "jumpVmCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('jumpVmNicName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('jumpVmPublicIpName'), copyIndex(1)))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('jumpVmName'), copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[variables('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))).primaryEndpoints.blob, variables('vhdContainerName'), '/', variables('jumpVmName'), copyIndex(1), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('jumpVmNicName'), copyIndex(1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1)))).primaryEndpoints.blob]"
          }
        }
      },
      "resources": [
        {
          "name": "Microsoft.Insights.VMDiagnosticsSettings",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('jumpVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Diagnostics",
            "type": "IaaSDiagnostics",
            "typeHandlerVersion": "1.5",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "xmlCfg": "[base64(concat(variables('wadprefix'), variables('wadresourceid'), concat(variables('jumpVmName'), copyIndex(1)), variables('wadsuffix')))]",
              "storageAccount": "[concat(variables('diagStorageName'), copyIndex(1))]"
            },
            "protectedSettings": {
              "storageAccountName": "[concat(variables('diagStorageName'), copyIndex(1))]",
              "storageAccountKey": "[listkeys(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1))), '2015-06-15').key1]",
              "storageAccountEndPoint": "https://core.windows.net"
            }
          }
        },
        {
          "name": "IaaSAntimalware",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('jumpVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Security",
            "type": "IaaSAntimalware",
            "typeHandlerVersion": "1.3",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "AntimalwareEnabled": true,
              "RealtimeProtectionEnabled": "true",
              "ScheduledScanSettings": {
                "isEnabled": "false",
                "day": "7",
                "time": "120",
                "scanType": "Quick"
              },
              "Exclusions": {
                "Extensions": "",
                "Paths": "",
                "Processes": ""
              }
            }
          }
        },
        {
          "name": "vmScript",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('jumpVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(parameters('scriptsStorage'), '/', variables('vmConfigScript'), parameters('scriptsSasToken'))]"
              ],
              "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ', variables('vmConfigScript'))]"
            }
          }
        }
      ]
    },
    {
      "name": "[concat(variables('liveVmName'), copyIndex(1))]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "liveVmCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('liveVmNicName'), copyIndex(1)))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('liveVmName'), copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[variables('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))).primaryEndpoints.blob, variables('vhdContainerName'), '/', variables('liveVmName'), copyIndex(1), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('liveVmNicName'), copyIndex(1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1)))).primaryEndpoints.blob]"
          }
        }
      },
      "resources": [
        {
          "name": "Microsoft.Insights.VMDiagnosticsSettings",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('liveVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Diagnostics",
            "type": "IaaSDiagnostics",
            "typeHandlerVersion": "1.5",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "xmlCfg": "[base64(concat(variables('wadprefix'), variables('wadresourceid'), concat(variables('liveVmName'), copyIndex(1)), variables('wadsuffix')))]",
              "storageAccount": "[concat(variables('diagStorageName'), copyIndex(1))]"
            },
            "protectedSettings": {
              "storageAccountName": "[concat(variables('diagStorageName'), copyIndex(1))]",
              "storageAccountKey": "[listkeys(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1))), '2015-06-15').key1]",
              "storageAccountEndPoint": "https://core.windows.net"
            }
          }
        },
        {
          "name": "IaaSAntimalware",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('liveVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Security",
            "type": "IaaSAntimalware",
            "typeHandlerVersion": "1.3",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "AntimalwareEnabled": true,
              "RealtimeProtectionEnabled": "true",
              "ScheduledScanSettings": {
                "isEnabled": "false",
                "day": "7",
                "time": "120",
                "scanType": "Quick"
              },
              "Exclusions": {
                "Extensions": "",
                "Paths": "",
                "Processes": ""
              }
            }
          }
        },
        {
          "name": "vmScript",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('liveVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(parameters('scriptsStorage'), '/', variables('vmConfigScript'), parameters('scriptsSasToken'))]"
              ],
              "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ', variables('vmConfigScript'))]"
            }
          }
        }
      ]
    },
    {
      "name": "[concat(variables('nonLiveVmName'), copyIndex(1))]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nonLiveVmCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('nonLiveVmNicName'), copyIndex(1)))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('nonLiveVmName'), copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[variables('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))).primaryEndpoints.blob, variables('vhdContainerName'), '/', variables('nonLiveVmName'), copyIndex(1), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nonLiveVmNicName'), copyIndex(1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1)))).primaryEndpoints.blob]"
          }
        }
      },
      "resources": [
        {
          "name": "Microsoft.Insights.VMDiagnosticsSettings",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('nonLiveVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Diagnostics",
            "type": "IaaSDiagnostics",
            "typeHandlerVersion": "1.5",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "xmlCfg": "[base64(concat(variables('wadprefix'), variables('wadresourceid'), concat(variables('nonLiveVmName'), copyIndex(1)), variables('wadsuffix')))]",
              "storageAccount": "[concat(variables('diagStorageName'), copyIndex(1))]"
            },
            "protectedSettings": {
              "storageAccountName": "[concat(variables('diagStorageName'), copyIndex(1))]",
              "storageAccountKey": "[listkeys(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1))), '2015-06-15').key1]",
              "storageAccountEndPoint": "https://core.windows.net"
            }
          }
        },
        {
          "name": "IaaSAntimalware",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('nonLiveVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Security",
            "type": "IaaSAntimalware",
            "typeHandlerVersion": "1.3",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "AntimalwareEnabled": true,
              "RealtimeProtectionEnabled": "true",
              "ScheduledScanSettings": {
                "isEnabled": "false",
                "day": "7",
                "time": "120",
                "scanType": "Quick"
              },
              "Exclusions": {
                "Extensions": "",
                "Paths": "",
                "Processes": ""
              }
            }
          }
        },
        {
          "name": "vmScript",
          "type": "extensions",
          "location": "[parameters('locations')[copyIndex()]]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('nonLiveVmName'), copyIndex(1)))]"
          ],
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(parameters('scriptsStorage'), '/', variables('vmConfigScript'), parameters('scriptsSasToken'))]"
              ],
              "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ', variables('vmConfigScript'))]"
            }
          }
        }
      ]
    }
  ]
}