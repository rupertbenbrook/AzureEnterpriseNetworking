{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "namePrefix": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The prefix to add to each resource name."
      }
    },
    "locations": {
      "type": "array",
      "metadata": {
        "description": "The list of locations to deploy to."
      }
    },
    "locationVnetPrefixes": {
      "type": "array",
      "metadata": {
        "description": "The list of vnet prefixes to use in each location."
      }
    },
    "adminUsername": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The administrative username to use for virtual machines."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "minLength": 8,
      "metadata": {
        "description": "The administrative password to use for virtual machines."
      }
    }
  },
  "variables": {
    // Storage
    "vhdStorageName": "[concat(parameters('namePrefix'), 'vhd')]",
    "vhdStorageType": "Standard_LRS",
    "vhdContainerName": "vhds",
    "diagStorageName": "[concat(parameters('namePrefix'), 'diag')]",
    "diagStorageType": "Standard_LRS",
    // Vnets
    "vnetName": "[concat(parameters('namePrefix'), 'vnet')]",
    "vnetAddressSuffix": "0.0/16",
    "vnetGatewaySubnetSuffix": "0.0/24",
    "vnetNvaSubnetSuffix": "1.0/24",
    // Gateways
    "gatewayPublicIpName": "[concat(parameters('namePrefix'), 'gwip')]",
    "gatewayName": "[concat(parameters('namePrefix'), 'gw')]",
    "gatewaySku": "Standard",
    // NICs
    "nvaVmNicName": "[concat(parameters('namePrefix'), 'nvanic')]",
    "jumpVmNicName": "[concat(parameters('namePrefix'), 'jumpnic')]",
    // VMs
    "nvaVmName": "[concat(parameters('namePrefix'), 'nva')]",
    "jumpVmName": "[concat(parameters('namePrefix'), 'jump')]",
    "jumpVmPublicIpName": "[concat(parameters('namePrefix'), 'jumpvmip')]",
    "vmSize": "Standard_F1",
    "vmImagePublisher": "MicrosoftWindowsServer",
    "vmImageOffer": "WindowsServer",
    "vmWindowsOSVersion": "2012-R2-Datacenter"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('vhdStorageName'), copyIndex(1))]",
      "apiVersion": "2016-01-01",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "vhdStorageCopy",
        "count": "[length(parameters('locations'))]"
      },
      "sku": {
        "name": "[variables('vhdStorageType')]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('diagStorageName'), copyIndex(1))]",
      "apiVersion": "2016-01-01",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "diagStorageCopy",
        "count": "[length(parameters('locations'))]"
      },
      "sku": {
        "name": "[variables('diagStorageType')]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "name": "[concat(variables('vnetName'), copyIndex(1))]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "vnetCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[concat(parameters('locationVnetPrefixes')[copyIndex()], variables('vnetAddressSuffix'))]"
          ]
        },
        "subnets": [
          {
            "name": "GatewaySubnet",
            "properties": {
              "addressPrefix": "[concat(parameters('locationVnetPrefixes')[copyIndex()], variables('vnetGatewaySubnetSuffix'))]"
            }
          },
          {
            "name": "NvaSubnet",
            "properties": {
              "addressPrefix": "[concat(parameters('locationVnetPrefixes')[copyIndex()], variables('vnetNvaSubnetSuffix'))]"
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('jumpVmPublicIpName'), copyIndex(1))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "jumpVmPublicIpCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    /*
    {
      "name": "[concat(variables('gatewayPublicIpName'), copyIndex(1))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "gatewayPublicIpCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "name": "[concat(variables('gatewayName'), copyIndex(1))]",
      "type": "Microsoft.Network/virtualNetworkGateways",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "gatewayCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('gatewayPublicIpName'), copyIndex(1))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'), copyIndex(1))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetName'), copyIndex(1))), '/subnets/GatewaySubnet')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('gatewayPublicIpName'), copyIndex(1)))]"
              }
            },
            "name": "vnetGatewayConfig"
          }
        ],
        "sku": {
          "name": "[variables('gatewaySku')]",
          "tier": "[variables('gatewaySku')]"
        },
        "gatewayType": "Vpn",
        "vpnType": "RouteBased",
        "enableBgp": "false"
      }
    },
    */
    {
      "name": "[concat(variables('nvaVmNicName'), copyIndex(1))]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nvaNicCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('vnetName'), copyIndex(1)))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('nvaVmNicName'), copyIndex(1), 'ipconfig')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetName'), copyIndex(1))), '/subnets/NvaSubnet')]"
              }
            }
          }
        ],
        "enableIPForwarding": true
      }
    },
    {
      "name": "[concat(variables('jumpVmNicName'), copyIndex(1))]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "jumpNicCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', concat(variables('vnetName'), copyIndex(1)))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('jumpVmNicName'), copyIndex(1), 'ipconfig')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('jumpVmPublicIpName'), copyIndex(1)))]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetName'), copyIndex(1))), '/subnets/NvaSubnet')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('nvaVmName'), copyIndex(1))]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "nvaVmCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('nvaVmNicName'), copyIndex(1)))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('nvaVmName'), copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[variables('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))).primaryEndpoints.blob, variables('vhdContainerName'), '/', variables('nvaVmName'), copyIndex(1), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nvaVmNicName'), copyIndex(1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1)))).primaryEndpoints.blob]"
          }
        }
      }
    },
    {
      "name": "[concat(variables('jumpVmName'), copyIndex(1))]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[parameters('locations')[copyIndex()]]",
      "copy": {
        "name": "jumpVmCopy",
        "count": "[length(parameters('locations'))]"
      },
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('jumpVmNicName'), copyIndex(1)))]",
        "[resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('jumpVmPublicIpName'), copyIndex(1)))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('jumpVmName'), copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[variables('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('vhdStorageName'), copyIndex(1)))).primaryEndpoints.blob, variables('vhdContainerName'), '/', variables('jumpVmName'), copyIndex(1), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('jumpVmNicName'), copyIndex(1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('diagStorageName'), copyIndex(1)))).primaryEndpoints.blob]"
          }
        }
      }
    }
  ]
}